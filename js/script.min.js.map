{"version":3,"sources":["script.js"],"names":["root","factory","exports","module","define","amd","this","modules","installedModules","__webpack_require__","moduleId","id","loaded","call","m","c","p","Object","defineProperty","value","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","Constructor","protoProps","staticProps","prototype","_initializerJs","_htmlParserJs","Typed","elementId","options","instance","TypeError","_classCallCheck","initializer","load","begin","pause","status","start","stop","clearInterval","timeout","typingComplete","toggleBlinking","onStop","arrayPos","typewrite","curString","curStrPos","backspace","onStart","reset","onDestroy","restart","arguments","undefined","replaceText","cursor","parentNode","removeChild","strPos","curLoop","insertCursor","onReset","_this","shuffleStringsIfNeeded","bindInputFocusEvents","bindFocusEvents","setTimeout","currentElContent","strings","sequence","startDelay","_this2","fadeOut","el","classList","contains","fadeOutClass","remove","humanize","humanizer","typeSpeed","numChars","htmlParser","typeHtmlChars","pauseTime","substr","charAt","test","skip","exec","parseInt","temporaryPause","onTypingPaused","substring","stringBeforeSkip","stringSkipped","stringAfterSkip","doneTyping","keepTyping","onTypingResumed","setPauseStatus","preStringTyped","nextString","_this3","onStringTyped","complete","loop","loopCount","backDelay","_this4","initFadeOut","backSpeed","backSpaceHtmlChars","curStringAtPosition","smartBackspace","stopNum","onLastStringBackspaced","onComplete","isTyping","isBlinking","cursorBlinking","add","speed","Math","round","random","shuffle","sort","_this5","className","fadeOutDelay","str","attr","setAttribute","isInput","contentType","innerHTML","textContent","_this6","addEventListener","e","showCursor","document","createElement","cursorChar","insertBefore","nextSibling","_extends","assign","source","hasOwnProperty","obj","_defaultsJs","_defaultsJs2","__esModule","default","Initializer","self","querySelector","tagName","toLowerCase","elContent","getAttribute","isPaused","map","s","trim","stringsElement","style","display","Array","slice","apply","children","stringsLength","stringEl","push","getCurrentElContent","autoInsertCss","appendAnimationCss","css","type","innerCss","body","appendChild","defaults","Infinity","HTMLParser","curChar","endTag"],"mappings":"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","file":"script.min.js","sourcesContent":["/*!\r\n *\r\n *   typed.js - A JavaScript Typing Animation Library\r\n *   Author: Matt Boldt <me@mattboldt.com>\r\n *   Version: v2.0.9\r\n *   Url: https://github.com/mattboldt/typed.js\r\n *   License(s): MIT\r\n *\r\n */\r\n(function webpackUniversalModuleDefinition(root, factory) {\r\n    if(typeof exports === 'object' && typeof module === 'object')\r\n        module.exports = factory();\r\n    else if(typeof define === 'function' && define.amd)\r\n        define([], factory);\r\n    else if(typeof exports === 'object')\r\n        exports[\"Typed\"] = factory();\r\n    else\r\n        root[\"Typed\"] = factory();\r\n})(this, function() {\r\n    return /******/ (function(modules) { // webpackBootstrap\r\n        /******/ \t// The module cache\r\n        /******/ \tvar installedModules = {};\r\n        /******/\r\n        /******/ \t// The require function\r\n        /******/ \tfunction __webpack_require__(moduleId) {\r\n            /******/\r\n            /******/ \t\t// Check if module is in cache\r\n            /******/ \t\tif(installedModules[moduleId])\r\n            /******/ \t\t\treturn installedModules[moduleId].exports;\r\n            /******/\r\n            /******/ \t\t// Create a new module (and put it into the cache)\r\n            /******/ \t\tvar module = installedModules[moduleId] = {\r\n                /******/ \t\t\texports: {},\r\n                /******/ \t\t\tid: moduleId,\r\n                /******/ \t\t\tloaded: false\r\n                /******/ \t\t};\r\n            /******/\r\n            /******/ \t\t// Execute the module function\r\n            /******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\r\n            /******/\r\n            /******/ \t\t// Flag the module as loaded\r\n            /******/ \t\tmodule.loaded = true;\r\n            /******/\r\n            /******/ \t\t// Return the exports of the module\r\n            /******/ \t\treturn module.exports;\r\n            /******/ \t}\r\n        /******/\r\n        /******/\r\n        /******/ \t// expose the modules object (__webpack_modules__)\r\n        /******/ \t__webpack_require__.m = modules;\r\n        /******/\r\n        /******/ \t// expose the module cache\r\n        /******/ \t__webpack_require__.c = installedModules;\r\n        /******/\r\n        /******/ \t// __webpack_public_path__\r\n        /******/ \t__webpack_require__.p = \"\";\r\n        /******/\r\n        /******/ \t// Load entry module and return exports\r\n        /******/ \treturn __webpack_require__(0);\r\n        /******/ })\r\n    /************************************************************************/\r\n    /******/ ([\r\n        /* 0 */\r\n        /***/ (function(module, exports, __webpack_require__) {\r\n\r\n            'use strict';\r\n\r\n            Object.defineProperty(exports, '__esModule', {\r\n                value: true\r\n            });\r\n\r\n            var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\r\n\r\n            function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\r\n\r\n            var _initializerJs = __webpack_require__(1);\r\n\r\n            var _htmlParserJs = __webpack_require__(3);\r\n\r\n            /**\r\n             * Welcome to Typed.js!\r\n             * @param {string} elementId HTML element ID _OR_ HTML element\r\n             * @param {object} options options object\r\n             * @returns {object} a new Typed object\r\n             */\r\n\r\n            var Typed = (function () {\r\n                function Typed(elementId, options) {\r\n                    _classCallCheck(this, Typed);\r\n\r\n                    // Initialize it up\r\n                    _initializerJs.initializer.load(this, options, elementId);\r\n                    // All systems go!\r\n                    this.begin();\r\n                }\r\n\r\n                /**\r\n                 * Toggle start() and stop() of the Typed instance\r\n                 * @public\r\n                 */\r\n\r\n                _createClass(Typed, [{\r\n                    key: 'toggle',\r\n                    value: function toggle() {\r\n                        this.pause.status ? this.start() : this.stop();\r\n                    }\r\n\r\n                    /**\r\n                     * Stop typing / backspacing and enable cursor blinking\r\n                     * @public\r\n                     */\r\n                }, {\r\n                    key: 'stop',\r\n                    value: function stop() {\r\n                        clearInterval(this.timeout);\r\n                        if (this.typingComplete) return;\r\n                        if (this.pause.status) return;\r\n                        this.toggleBlinking(true);\r\n                        this.pause.status = true;\r\n                        this.options.onStop(this.arrayPos, this);\r\n                    }\r\n\r\n                    /**\r\n                     * Start typing / backspacing after being stopped\r\n                     * @public\r\n                     */\r\n                }, {\r\n                    key: 'start',\r\n                    value: function start() {\r\n                        if (this.typingComplete) return;\r\n                        if (!this.pause.status) return;\r\n                        this.pause.status = false;\r\n                        if (this.pause.typewrite) {\r\n                            this.typewrite(this.pause.curString, this.pause.curStrPos);\r\n                        } else {\r\n                            this.backspace(this.pause.curString, this.pause.curStrPos);\r\n                        }\r\n                        this.options.onStart(this.arrayPos, this);\r\n                    }\r\n\r\n                    /**\r\n                     * Destroy this instance of Typed\r\n                     * @public\r\n                     */\r\n                }, {\r\n                    key: 'destroy',\r\n                    value: function destroy() {\r\n                        this.reset(false);\r\n                        this.options.onDestroy(this);\r\n                    }\r\n\r\n                    /**\r\n                     * Reset Typed and optionally restarts\r\n                     * @param {boolean} restart\r\n                     * @public\r\n                     */\r\n                }, {\r\n                    key: 'reset',\r\n                    value: function reset() {\r\n                        var restart = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];\r\n\r\n                        clearInterval(this.timeout);\r\n                        this.replaceText('');\r\n                        if (this.cursor && this.cursor.parentNode) {\r\n                            this.cursor.parentNode.removeChild(this.cursor);\r\n                            this.cursor = null;\r\n                        }\r\n                        this.strPos = 0;\r\n                        this.arrayPos = 0;\r\n                        this.curLoop = 0;\r\n                        if (restart) {\r\n                            this.insertCursor();\r\n                            this.options.onReset(this);\r\n                            this.begin();\r\n                        }\r\n                    }\r\n\r\n                    /**\r\n                     * Begins the typing animation\r\n                     * @private\r\n                     */\r\n                }, {\r\n                    key: 'begin',\r\n                    value: function begin() {\r\n                        var _this = this;\r\n\r\n                        this.typingComplete = false;\r\n                        this.shuffleStringsIfNeeded(this);\r\n                        this.insertCursor();\r\n                        if (this.bindInputFocusEvents) this.bindFocusEvents();\r\n                        this.timeout = setTimeout(function () {\r\n                            // Check if there is some text in the element, if yes start by backspacing the default message\r\n                            if (!_this.currentElContent || _this.currentElContent.length === 0) {\r\n                                _this.typewrite(_this.strings[_this.sequence[_this.arrayPos]], _this.strPos);\r\n                            } else {\r\n                                // Start typing\r\n                                _this.backspace(_this.currentElContent, _this.currentElContent.length);\r\n                            }\r\n                        }, this.startDelay);\r\n                    }\r\n\r\n                    /**\r\n                     * Called for each character typed\r\n                     * @param {string} curString the current string in the strings array\r\n                     * @param {number} curStrPos the current position in the curString\r\n                     * @private\r\n                     */\r\n                }, {\r\n                    key: 'typewrite',\r\n                    value: function typewrite(curString, curStrPos) {\r\n                        var _this2 = this;\r\n\r\n                        if (this.fadeOut && this.el.classList.contains(this.fadeOutClass)) {\r\n                            this.el.classList.remove(this.fadeOutClass);\r\n                            if (this.cursor) this.cursor.classList.remove(this.fadeOutClass);\r\n                        }\r\n\r\n                        var humanize = this.humanizer(this.typeSpeed);\r\n                        var numChars = 1;\r\n\r\n                        if (this.pause.status === true) {\r\n                            this.setPauseStatus(curString, curStrPos, true);\r\n                            return;\r\n                        }\r\n\r\n                        // contain typing function in a timeout humanize'd delay\r\n                        this.timeout = setTimeout(function () {\r\n                            // skip over any HTML chars\r\n                            curStrPos = _htmlParserJs.htmlParser.typeHtmlChars(curString, curStrPos, _this2);\r\n\r\n                            var pauseTime = 0;\r\n                            var substr = curString.substr(curStrPos);\r\n                            // check for an escape character before a pause value\r\n                            // format: \\^\\d+ .. eg: ^1000 .. should be able to print the ^ too using ^^\r\n                            // single ^ are removed from string\r\n                            if (substr.charAt(0) === '^') {\r\n                                if (/^\\^\\d+/.test(substr)) {\r\n                                    var skip = 1; // skip at least 1\r\n                                    substr = /\\d+/.exec(substr)[0];\r\n                                    skip += substr.length;\r\n                                    pauseTime = parseInt(substr);\r\n                                    _this2.temporaryPause = true;\r\n                                    _this2.options.onTypingPaused(_this2.arrayPos, _this2);\r\n                                    // strip out the escape character and pause value so they're not printed\r\n                                    curString = curString.substring(0, curStrPos) + curString.substring(curStrPos + skip);\r\n                                    _this2.toggleBlinking(true);\r\n                                }\r\n                            }\r\n\r\n                            // check for skip characters formatted as\r\n                            // \"this is a `string to print NOW` ...\"\r\n                            if (substr.charAt(0) === '`') {\r\n                                while (curString.substr(curStrPos + numChars).charAt(0) !== '`') {\r\n                                    numChars++;\r\n                                    if (curStrPos + numChars > curString.length) break;\r\n                                }\r\n                                // strip out the escape characters and append all the string in between\r\n                                var stringBeforeSkip = curString.substring(0, curStrPos);\r\n                                var stringSkipped = curString.substring(stringBeforeSkip.length + 1, curStrPos + numChars);\r\n                                var stringAfterSkip = curString.substring(curStrPos + numChars + 1);\r\n                                curString = stringBeforeSkip + stringSkipped + stringAfterSkip;\r\n                                numChars--;\r\n                            }\r\n\r\n                            // timeout for any pause after a character\r\n                            _this2.timeout = setTimeout(function () {\r\n                                // Accounts for blinking while paused\r\n                                _this2.toggleBlinking(false);\r\n\r\n                                // We're done with this sentence!\r\n                                if (curStrPos >= curString.length) {\r\n                                    _this2.doneTyping(curString, curStrPos);\r\n                                } else {\r\n                                    _this2.keepTyping(curString, curStrPos, numChars);\r\n                                }\r\n                                // end of character pause\r\n                                if (_this2.temporaryPause) {\r\n                                    _this2.temporaryPause = false;\r\n                                    _this2.options.onTypingResumed(_this2.arrayPos, _this2);\r\n                                }\r\n                            }, pauseTime);\r\n\r\n                            // humanized value for typing\r\n                        }, humanize);\r\n                    }\r\n\r\n                    /**\r\n                     * Continue to the next string & begin typing\r\n                     * @param {string} curString the current string in the strings array\r\n                     * @param {number} curStrPos the current position in the curString\r\n                     * @private\r\n                     */\r\n                }, {\r\n                    key: 'keepTyping',\r\n                    value: function keepTyping(curString, curStrPos, numChars) {\r\n                        // call before functions if applicable\r\n                        if (curStrPos === 0) {\r\n                            this.toggleBlinking(false);\r\n                            this.options.preStringTyped(this.arrayPos, this);\r\n                        }\r\n                        // start typing each new char into existing string\r\n                        // curString: arg, this.el.html: original text inside element\r\n                        curStrPos += numChars;\r\n                        var nextString = curString.substr(0, curStrPos);\r\n                        this.replaceText(nextString);\r\n                        // loop the function\r\n                        this.typewrite(curString, curStrPos);\r\n                    }\r\n\r\n                    /**\r\n                     * We're done typing the current string\r\n                     * @param {string} curString the current string in the strings array\r\n                     * @param {number} curStrPos the current position in the curString\r\n                     * @private\r\n                     */\r\n                }, {\r\n                    key: 'doneTyping',\r\n                    value: function doneTyping(curString, curStrPos) {\r\n                        var _this3 = this;\r\n\r\n                        // fires callback function\r\n                        this.options.onStringTyped(this.arrayPos, this);\r\n                        this.toggleBlinking(true);\r\n                        // is this the final string\r\n                        if (this.arrayPos === this.strings.length - 1) {\r\n                            // callback that occurs on the last typed string\r\n                            this.complete();\r\n                            // quit if we wont loop back\r\n                            if (this.loop === false || this.curLoop === this.loopCount) {\r\n                                return;\r\n                            }\r\n                        }\r\n                        this.timeout = setTimeout(function () {\r\n                            _this3.backspace(curString, curStrPos);\r\n                        }, this.backDelay);\r\n                    }\r\n\r\n                    /**\r\n                     * Backspaces 1 character at a time\r\n                     * @param {string} curString the current string in the strings array\r\n                     * @param {number} curStrPos the current position in the curString\r\n                     * @private\r\n                     */\r\n                }, {\r\n                    key: 'backspace',\r\n                    value: function backspace(curString, curStrPos) {\r\n                        var _this4 = this;\r\n\r\n                        if (this.pause.status === true) {\r\n                            this.setPauseStatus(curString, curStrPos, true);\r\n                            return;\r\n                        }\r\n                        if (this.fadeOut) return this.initFadeOut();\r\n\r\n                        this.toggleBlinking(false);\r\n                        var humanize = this.humanizer(this.backSpeed);\r\n\r\n                        this.timeout = setTimeout(function () {\r\n                            curStrPos = _htmlParserJs.htmlParser.backSpaceHtmlChars(curString, curStrPos, _this4);\r\n                            // replace text with base text + typed characters\r\n                            var curStringAtPosition = curString.substr(0, curStrPos);\r\n                            _this4.replaceText(curStringAtPosition);\r\n\r\n                            // if smartBack is enabled\r\n                            if (_this4.smartBackspace) {\r\n                                // the remaining part of the current string is equal of the same part of the new string\r\n                                var nextString = _this4.strings[_this4.arrayPos + 1];\r\n                                if (nextString && curStringAtPosition === nextString.substr(0, curStrPos)) {\r\n                                    _this4.stopNum = curStrPos;\r\n                                } else {\r\n                                    _this4.stopNum = 0;\r\n                                }\r\n                            }\r\n\r\n                            // if the number (id of character in current string) is\r\n                            // less than the stop number, keep going\r\n                            if (curStrPos > _this4.stopNum) {\r\n                                // subtract characters one by one\r\n                                curStrPos--;\r\n                                // loop the function\r\n                                _this4.backspace(curString, curStrPos);\r\n                            } else if (curStrPos <= _this4.stopNum) {\r\n                                // if the stop number has been reached, increase\r\n                                // array position to next string\r\n                                _this4.arrayPos++;\r\n                                // When looping, begin at the beginning after backspace complete\r\n                                if (_this4.arrayPos === _this4.strings.length) {\r\n                                    _this4.arrayPos = 0;\r\n                                    _this4.options.onLastStringBackspaced();\r\n                                    _this4.shuffleStringsIfNeeded();\r\n                                    _this4.begin();\r\n                                } else {\r\n                                    _this4.typewrite(_this4.strings[_this4.sequence[_this4.arrayPos]], curStrPos);\r\n                                }\r\n                            }\r\n                            // humanized value for typing\r\n                        }, humanize);\r\n                    }\r\n\r\n                    /**\r\n                     * Full animation is complete\r\n                     * @private\r\n                     */\r\n                }, {\r\n                    key: 'complete',\r\n                    value: function complete() {\r\n                        this.options.onComplete(this);\r\n                        if (this.loop) {\r\n                            this.curLoop++;\r\n                        } else {\r\n                            this.typingComplete = true;\r\n                        }\r\n                    }\r\n\r\n                    /**\r\n                     * Has the typing been stopped\r\n                     * @param {string} curString the current string in the strings array\r\n                     * @param {number} curStrPos the current position in the curString\r\n                     * @param {boolean} isTyping\r\n                     * @private\r\n                     */\r\n                }, {\r\n                    key: 'setPauseStatus',\r\n                    value: function setPauseStatus(curString, curStrPos, isTyping) {\r\n                        this.pause.typewrite = isTyping;\r\n                        this.pause.curString = curString;\r\n                        this.pause.curStrPos = curStrPos;\r\n                    }\r\n\r\n                    /**\r\n                     * Toggle the blinking cursor\r\n                     * @param {boolean} isBlinking\r\n                     * @private\r\n                     */\r\n                }, {\r\n                    key: 'toggleBlinking',\r\n                    value: function toggleBlinking(isBlinking) {\r\n                        if (!this.cursor) return;\r\n                        // if in paused state, don't toggle blinking a 2nd time\r\n                        if (this.pause.status) return;\r\n                        if (this.cursorBlinking === isBlinking) return;\r\n                        this.cursorBlinking = isBlinking;\r\n                        if (isBlinking) {\r\n                            this.cursor.classList.add('typed-cursor--blink');\r\n                        } else {\r\n                            this.cursor.classList.remove('typed-cursor--blink');\r\n                        }\r\n                    }\r\n\r\n                    /**\r\n                     * Speed in MS to type\r\n                     * @param {number} speed\r\n                     * @private\r\n                     */\r\n                }, {\r\n                    key: 'humanizer',\r\n                    value: function humanizer(speed) {\r\n                        return Math.round(Math.random() * speed / 2) + speed;\r\n                    }\r\n\r\n                    /**\r\n                     * Shuffle the sequence of the strings array\r\n                     * @private\r\n                     */\r\n                }, {\r\n                    key: 'shuffleStringsIfNeeded',\r\n                    value: function shuffleStringsIfNeeded() {\r\n                        if (!this.shuffle) return;\r\n                        this.sequence = this.sequence.sort(function () {\r\n                            return Math.random() - 0.5;\r\n                        });\r\n                    }\r\n\r\n                    /**\r\n                     * Adds a CSS class to fade out current string\r\n                     * @private\r\n                     */\r\n                }, {\r\n                    key: 'initFadeOut',\r\n                    value: function initFadeOut() {\r\n                        var _this5 = this;\r\n\r\n                        this.el.className += ' ' + this.fadeOutClass;\r\n                        if (this.cursor) this.cursor.className += ' ' + this.fadeOutClass;\r\n                        return setTimeout(function () {\r\n                            _this5.arrayPos++;\r\n                            _this5.replaceText('');\r\n\r\n                            // Resets current string if end of loop reached\r\n                            if (_this5.strings.length > _this5.arrayPos) {\r\n                                _this5.typewrite(_this5.strings[_this5.sequence[_this5.arrayPos]], 0);\r\n                            } else {\r\n                                _this5.typewrite(_this5.strings[0], 0);\r\n                                _this5.arrayPos = 0;\r\n                            }\r\n                        }, this.fadeOutDelay);\r\n                    }\r\n\r\n                    /**\r\n                     * Replaces current text in the HTML element\r\n                     * depending on element type\r\n                     * @param {string} str\r\n                     * @private\r\n                     */\r\n                }, {\r\n                    key: 'replaceText',\r\n                    value: function replaceText(str) {\r\n                        if (this.attr) {\r\n                            this.el.setAttribute(this.attr, str);\r\n                        } else {\r\n                            if (this.isInput) {\r\n                                this.el.value = str;\r\n                            } else if (this.contentType === 'html') {\r\n                                this.el.innerHTML = str;\r\n                            } else {\r\n                                this.el.textContent = str;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    /**\r\n                     * If using input elements, bind focus in order to\r\n                     * start and stop the animation\r\n                     * @private\r\n                     */\r\n                }, {\r\n                    key: 'bindFocusEvents',\r\n                    value: function bindFocusEvents() {\r\n                        var _this6 = this;\r\n\r\n                        if (!this.isInput) return;\r\n                        this.el.addEventListener('focus', function (e) {\r\n                            _this6.stop();\r\n                        });\r\n                        this.el.addEventListener('blur', function (e) {\r\n                            if (_this6.el.value && _this6.el.value.length !== 0) {\r\n                                return;\r\n                            }\r\n                            _this6.start();\r\n                        });\r\n                    }\r\n\r\n                    /**\r\n                     * On init, insert the cursor element\r\n                     * @private\r\n                     */\r\n                }, {\r\n                    key: 'insertCursor',\r\n                    value: function insertCursor() {\r\n                        if (!this.showCursor) return;\r\n                        if (this.cursor) return;\r\n                        this.cursor = document.createElement('span');\r\n                        this.cursor.className = 'typed-cursor';\r\n                        this.cursor.innerHTML = this.cursorChar;\r\n                        this.el.parentNode && this.el.parentNode.insertBefore(this.cursor, this.el.nextSibling);\r\n                    }\r\n                }]);\r\n\r\n                return Typed;\r\n            })();\r\n\r\n            exports['default'] = Typed;\r\n            module.exports = exports['default'];\r\n\r\n            /***/ }),\r\n        /* 1 */\r\n        /***/ (function(module, exports, __webpack_require__) {\r\n\r\n            'use strict';\r\n\r\n            Object.defineProperty(exports, '__esModule', {\r\n                value: true\r\n            });\r\n\r\n            var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\r\n\r\n            var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\r\n\r\n            function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\r\n\r\n            function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\r\n\r\n            var _defaultsJs = __webpack_require__(2);\r\n\r\n            var _defaultsJs2 = _interopRequireDefault(_defaultsJs);\r\n\r\n            /**\r\n             * Initialize the Typed object\r\n             */\r\n\r\n            var Initializer = (function () {\r\n                function Initializer() {\r\n                    _classCallCheck(this, Initializer);\r\n                }\r\n\r\n                _createClass(Initializer, [{\r\n                    key: 'load',\r\n\r\n                    /**\r\n                     * Load up defaults & options on the Typed instance\r\n                     * @param {Typed} self instance of Typed\r\n                     * @param {object} options options object\r\n                     * @param {string} elementId HTML element ID _OR_ instance of HTML element\r\n                     * @private\r\n                     */\r\n\r\n                    value: function load(self, options, elementId) {\r\n                        // chosen element to manipulate text\r\n                        if (typeof elementId === 'string') {\r\n                            self.el = document.querySelector(elementId);\r\n                        } else {\r\n                            self.el = elementId;\r\n                        }\r\n\r\n                        self.options = _extends({}, _defaultsJs2['default'], options);\r\n\r\n                        // attribute to type into\r\n                        self.isInput = self.el.tagName.toLowerCase() === 'input';\r\n                        self.attr = self.options.attr;\r\n                        self.bindInputFocusEvents = self.options.bindInputFocusEvents;\r\n\r\n                        // show cursor\r\n                        self.showCursor = self.isInput ? false : self.options.showCursor;\r\n\r\n                        // custom cursor\r\n                        self.cursorChar = self.options.cursorChar;\r\n\r\n                        // Is the cursor blinking\r\n                        self.cursorBlinking = true;\r\n\r\n                        // text content of element\r\n                        self.elContent = self.attr ? self.el.getAttribute(self.attr) : self.el.textContent;\r\n\r\n                        // html or plain text\r\n                        self.contentType = self.options.contentType;\r\n\r\n                        // typing speed\r\n                        self.typeSpeed = self.options.typeSpeed;\r\n\r\n                        // add a delay before typing starts\r\n                        self.startDelay = self.options.startDelay;\r\n\r\n                        // backspacing speed\r\n                        self.backSpeed = self.options.backSpeed;\r\n\r\n                        // only backspace what doesn't match the previous string\r\n                        self.smartBackspace = self.options.smartBackspace;\r\n\r\n                        // amount of time to wait before backspacing\r\n                        self.backDelay = self.options.backDelay;\r\n\r\n                        // Fade out instead of backspace\r\n                        self.fadeOut = self.options.fadeOut;\r\n                        self.fadeOutClass = self.options.fadeOutClass;\r\n                        self.fadeOutDelay = self.options.fadeOutDelay;\r\n\r\n                        // variable to check whether typing is currently paused\r\n                        self.isPaused = false;\r\n\r\n                        // input strings of text\r\n                        self.strings = self.options.strings.map(function (s) {\r\n                            return s.trim();\r\n                        });\r\n\r\n                        // div containing strings\r\n                        if (typeof self.options.stringsElement === 'string') {\r\n                            self.stringsElement = document.querySelector(self.options.stringsElement);\r\n                        } else {\r\n                            self.stringsElement = self.options.stringsElement;\r\n                        }\r\n\r\n                        if (self.stringsElement) {\r\n                            self.strings = [];\r\n                            self.stringsElement.style.display = 'none';\r\n                            var strings = Array.prototype.slice.apply(self.stringsElement.children);\r\n                            var stringsLength = strings.length;\r\n\r\n                            if (stringsLength) {\r\n                                for (var i = 0; i < stringsLength; i += 1) {\r\n                                    var stringEl = strings[i];\r\n                                    self.strings.push(stringEl.innerHTML.trim());\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        // character number position of current string\r\n                        self.strPos = 0;\r\n\r\n                        // current array position\r\n                        self.arrayPos = 0;\r\n\r\n                        // index of string to stop backspacing on\r\n                        self.stopNum = 0;\r\n\r\n                        // Looping logic\r\n                        self.loop = self.options.loop;\r\n                        self.loopCount = self.options.loopCount;\r\n                        self.curLoop = 0;\r\n\r\n                        // shuffle the strings\r\n                        self.shuffle = self.options.shuffle;\r\n                        // the order of strings\r\n                        self.sequence = [];\r\n\r\n                        self.pause = {\r\n                            status: false,\r\n                            typewrite: true,\r\n                            curString: '',\r\n                            curStrPos: 0\r\n                        };\r\n\r\n                        // When the typing is complete (when not looped)\r\n                        self.typingComplete = false;\r\n\r\n                        // Set the order in which the strings are typed\r\n                        for (var i in self.strings) {\r\n                            self.sequence[i] = i;\r\n                        }\r\n\r\n                        // If there is some text in the element\r\n                        self.currentElContent = this.getCurrentElContent(self);\r\n\r\n                        self.autoInsertCss = self.options.autoInsertCss;\r\n\r\n                        this.appendAnimationCss(self);\r\n                    }\r\n                }, {\r\n                    key: 'getCurrentElContent',\r\n                    value: function getCurrentElContent(self) {\r\n                        var elContent = '';\r\n                        if (self.attr) {\r\n                            elContent = self.el.getAttribute(self.attr);\r\n                        } else if (self.isInput) {\r\n                            elContent = self.el.value;\r\n                        } else if (self.contentType === 'html') {\r\n                            elContent = self.el.innerHTML;\r\n                        } else {\r\n                            elContent = self.el.textContent;\r\n                        }\r\n                        return elContent;\r\n                    }\r\n                }, {\r\n                    key: 'appendAnimationCss',\r\n                    value: function appendAnimationCss(self) {\r\n                        var cssDataName = 'data-typed-js-css';\r\n                        if (!self.autoInsertCss) {\r\n                            return;\r\n                        }\r\n                        if (!self.showCursor && !self.fadeOut) {\r\n                            return;\r\n                        }\r\n                        if (document.querySelector('[' + cssDataName + ']')) {\r\n                            return;\r\n                        }\r\n\r\n                        var css = document.createElement('style');\r\n                        css.type = 'text/css';\r\n                        css.setAttribute(cssDataName, true);\r\n\r\n                        var innerCss = '';\r\n                        if (self.showCursor) {\r\n                            innerCss += '\\n        .typed-cursor{\\n          opacity: 1;\\n        }\\n        .typed-cursor.typed-cursor--blink{\\n          animation: typedjsBlink 0.7s infinite;\\n          -webkit-animation: typedjsBlink 0.7s infinite;\\n                  animation: typedjsBlink 0.7s infinite;\\n        }\\n        @keyframes typedjsBlink{\\n          50% { opacity: 0.0; }\\n        }\\n        @-webkit-keyframes typedjsBlink{\\n          0% { opacity: 1; }\\n          50% { opacity: 0.0; }\\n          100% { opacity: 1; }\\n        }\\n      ';\r\n                        }\r\n                        if (self.fadeOut) {\r\n                            innerCss += '\\n        .typed-fade-out{\\n          opacity: 0;\\n          transition: opacity .25s;\\n        }\\n        .typed-cursor.typed-cursor--blink.typed-fade-out{\\n          -webkit-animation: 0;\\n          animation: 0;\\n        }\\n      ';\r\n                        }\r\n                        if (css.length === 0) {\r\n                            return;\r\n                        }\r\n                        css.innerHTML = innerCss;\r\n                        document.body.appendChild(css);\r\n                    }\r\n                }]);\r\n\r\n                return Initializer;\r\n            })();\r\n\r\n            exports['default'] = Initializer;\r\n            var initializer = new Initializer();\r\n            exports.initializer = initializer;\r\n\r\n            /***/ }),\r\n        /* 2 */\r\n        /***/ (function(module, exports) {\r\n\r\n            /**\r\n             * Defaults & options\r\n             * @returns {object} Typed defaults & options\r\n             * @public\r\n             */\r\n\r\n            'use strict';\r\n\r\n            Object.defineProperty(exports, '__esModule', {\r\n                value: true\r\n            });\r\n            var defaults = {\r\n                /**\r\n                 * @property {array} strings strings to be typed\r\n                 * @property {string} stringsElement ID of element containing string children\r\n                 */\r\n                strings: ['These are the default values...', 'You know what you should do?', 'Use your own!', 'Have a great day!'],\r\n                stringsElement: null,\r\n\r\n                /**\r\n                 * @property {number} typeSpeed type speed in milliseconds\r\n                 */\r\n                typeSpeed: 0,\r\n\r\n                /**\r\n                 * @property {number} startDelay time before typing starts in milliseconds\r\n                 */\r\n                startDelay: 0,\r\n\r\n                /**\r\n                 * @property {number} backSpeed backspacing speed in milliseconds\r\n                 */\r\n                backSpeed: 0,\r\n\r\n                /**\r\n                 * @property {boolean} smartBackspace only backspace what doesn't match the previous string\r\n                 */\r\n                smartBackspace: true,\r\n\r\n                /**\r\n                 * @property {boolean} shuffle shuffle the strings\r\n                 */\r\n                shuffle: false,\r\n\r\n                /**\r\n                 * @property {number} backDelay time before backspacing in milliseconds\r\n                 */\r\n                backDelay: 700,\r\n\r\n                /**\r\n                 * @property {boolean} fadeOut Fade out instead of backspace\r\n                 * @property {string} fadeOutClass css class for fade animation\r\n                 * @property {boolean} fadeOutDelay Fade out delay in milliseconds\r\n                 */\r\n                fadeOut: false,\r\n                fadeOutClass: 'typed-fade-out',\r\n                fadeOutDelay: 500,\r\n\r\n                /**\r\n                 * @property {boolean} loop loop strings\r\n                 * @property {number} loopCount amount of loops\r\n                 */\r\n                loop: false,\r\n                loopCount: Infinity,\r\n\r\n                /**\r\n                 * @property {boolean} showCursor show cursor\r\n                 * @property {string} cursorChar character for cursor\r\n                 * @property {boolean} autoInsertCss insert CSS for cursor and fadeOut into HTML <head>\r\n                 */\r\n                showCursor: true,\r\n                cursorChar: '|',\r\n                autoInsertCss: true,\r\n\r\n                /**\r\n                 * @property {string} attr attribute for typing\r\n                 * Ex: input placeholder, value, or just HTML text\r\n                 */\r\n                attr: null,\r\n\r\n                /**\r\n                 * @property {boolean} bindInputFocusEvents bind to focus and blur if el is text input\r\n                 */\r\n                bindInputFocusEvents: false,\r\n\r\n                /**\r\n                 * @property {string} contentType 'html' or 'null' for plaintext\r\n                 */\r\n                contentType: 'html',\r\n\r\n                /**\r\n                 * All typing is complete\r\n                 * @param {Typed} self\r\n                 */\r\n                onComplete: function onComplete(self) {},\r\n\r\n                /**\r\n                 * Before each string is typed\r\n                 * @param {number} arrayPos\r\n                 * @param {Typed} self\r\n                 */\r\n                preStringTyped: function preStringTyped(arrayPos, self) {},\r\n\r\n                /**\r\n                 * After each string is typed\r\n                 * @param {number} arrayPos\r\n                 * @param {Typed} self\r\n                 */\r\n                onStringTyped: function onStringTyped(arrayPos, self) {},\r\n\r\n                /**\r\n                 * During looping, after last string is typed\r\n                 * @param {Typed} self\r\n                 */\r\n                onLastStringBackspaced: function onLastStringBackspaced(self) {},\r\n\r\n                /**\r\n                 * Typing has been stopped\r\n                 * @param {number} arrayPos\r\n                 * @param {Typed} self\r\n                 */\r\n                onTypingPaused: function onTypingPaused(arrayPos, self) {},\r\n\r\n                /**\r\n                 * Typing has been started after being stopped\r\n                 * @param {number} arrayPos\r\n                 * @param {Typed} self\r\n                 */\r\n                onTypingResumed: function onTypingResumed(arrayPos, self) {},\r\n\r\n                /**\r\n                 * After reset\r\n                 * @param {Typed} self\r\n                 */\r\n                onReset: function onReset(self) {},\r\n\r\n                /**\r\n                 * After stop\r\n                 * @param {number} arrayPos\r\n                 * @param {Typed} self\r\n                 */\r\n                onStop: function onStop(arrayPos, self) {},\r\n\r\n                /**\r\n                 * After start\r\n                 * @param {number} arrayPos\r\n                 * @param {Typed} self\r\n                 */\r\n                onStart: function onStart(arrayPos, self) {},\r\n\r\n                /**\r\n                 * After destroy\r\n                 * @param {Typed} self\r\n                 */\r\n                onDestroy: function onDestroy(self) {}\r\n            };\r\n\r\n            exports['default'] = defaults;\r\n            module.exports = exports['default'];\r\n\r\n            /***/ }),\r\n        /* 3 */\r\n        /***/ (function(module, exports) {\r\n\r\n            /**\r\n             * TODO: These methods can probably be combined somehow\r\n             * Parse HTML tags & HTML Characters\r\n             */\r\n\r\n            'use strict';\r\n\r\n            Object.defineProperty(exports, '__esModule', {\r\n                value: true\r\n            });\r\n\r\n            var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\r\n\r\n            function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\r\n\r\n            var HTMLParser = (function () {\r\n                function HTMLParser() {\r\n                    _classCallCheck(this, HTMLParser);\r\n                }\r\n\r\n                _createClass(HTMLParser, [{\r\n                    key: 'typeHtmlChars',\r\n\r\n                    /**\r\n                     * Type HTML tags & HTML Characters\r\n                     * @param {string} curString Current string\r\n                     * @param {number} curStrPos Position in current string\r\n                     * @param {Typed} self instance of Typed\r\n                     * @returns {number} a new string position\r\n                     * @private\r\n                     */\r\n\r\n                    value: function typeHtmlChars(curString, curStrPos, self) {\r\n                        if (self.contentType !== 'html') return curStrPos;\r\n                        var curChar = curString.substr(curStrPos).charAt(0);\r\n                        if (curChar === '<' || curChar === '&') {\r\n                            var endTag = '';\r\n                            if (curChar === '<') {\r\n                                endTag = '>';\r\n                            } else {\r\n                                endTag = ';';\r\n                            }\r\n                            while (curString.substr(curStrPos + 1).charAt(0) !== endTag) {\r\n                                curStrPos++;\r\n                                if (curStrPos + 1 > curString.length) {\r\n                                    break;\r\n                                }\r\n                            }\r\n                            curStrPos++;\r\n                        }\r\n                        return curStrPos;\r\n                    }\r\n\r\n                    /**\r\n                     * Backspace HTML tags and HTML Characters\r\n                     * @param {string} curString Current string\r\n                     * @param {number} curStrPos Position in current string\r\n                     * @param {Typed} self instance of Typed\r\n                     * @returns {number} a new string position\r\n                     * @private\r\n                     */\r\n                }, {\r\n                    key: 'backSpaceHtmlChars',\r\n                    value: function backSpaceHtmlChars(curString, curStrPos, self) {\r\n                        if (self.contentType !== 'html') return curStrPos;\r\n                        var curChar = curString.substr(curStrPos).charAt(0);\r\n                        if (curChar === '>' || curChar === ';') {\r\n                            var endTag = '';\r\n                            if (curChar === '>') {\r\n                                endTag = '<';\r\n                            } else {\r\n                                endTag = '&';\r\n                            }\r\n                            while (curString.substr(curStrPos - 1).charAt(0) !== endTag) {\r\n                                curStrPos--;\r\n                                if (curStrPos < 0) {\r\n                                    break;\r\n                                }\r\n                            }\r\n                            curStrPos--;\r\n                        }\r\n                        return curStrPos;\r\n                    }\r\n                }]);\r\n\r\n                return HTMLParser;\r\n            })();\r\n\r\n            exports['default'] = HTMLParser;\r\n            var htmlParser = new HTMLParser();\r\n            exports.htmlParser = htmlParser;\r\n\r\n            /***/ })\r\n        /******/ ])\r\n});\r\n;"]}